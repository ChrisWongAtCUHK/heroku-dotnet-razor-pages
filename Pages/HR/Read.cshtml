@page "{id:int?}"
@model ReadModel
@using DotNetRazorPages.Entity
@using Microsoft.AspNetCore.Mvc.RazorPages;
@using DotNetRazorPages.Entity.HR;
@using Models.HR;
@using Paging;

@{
    ViewData["Title"] = "Employees";
}

<style>
    .pagingDiv {
        background: #f2f2f2;
    }

    .pagingDiv>a {
        display: inline-block;
        padding: 0px 9px;
        margin-right: 4px;
        border-radius: 3px;
        border: solid 1px #c0c0c0;
        background: #e9e9e9;
        box-shadow: inset 0px 1px 0px rgba(255, 255, 255, .8), 0px 1px 3px rgba(0, 0, 0, .1);
        font-size: .875em;
        font-weight: bold;
        text-decoration: none;
        color: #717171;
        text-shadow: 0px 1px 0px rgba(255, 255, 255, 1);
    }

    .pagingDiv>a:hover {
        background: #fefefe;
        background: -webkit-gradient(linear, 0% 0%, 0% 100%, from(#FEFEFE), to(#f0f0f0));
        background: -moz-linear-gradient(0% 0% 270deg, #FEFEFE, #f0f0f0);
    }

    using Microsoft.EntityFrameworkCore.Design;

    .pagingDiv>a.active {
        border: none;
        background: #616161;
        box-shadow: inset 0px 0px 8px rgba(0, 0, 0, .5), 0px 1px 0px rgba(255, 255, 255, .8);
        color: #f0f0f0;
        text-shadow: 0px 0px 3px rgba(0, 0, 0, .5);
    }
</style>

<h1 class="bg-info text-white">Employees</h1>
<div>
    &nbsp;
</div>
<table class="table table-sm table-bordered">
    <tr>
        <th>Id</th>
        <th>First Name</th>
        <th>Last Name</th>
        <th>Joined Date</th>
        <th>Salary</th>
        <th>Department</th>
        <th>Skills</th>
    </tr>
    @foreach (MySqlEmployee employee in Model.employeeList!.Employees)
    {
        <tr>
            <td>@employee.Id</td>
            <td>@employee.FirstName</td>
            <td>@employee.LastName</td>
            <td>@employee.JoinedDate</td>
            <td>@employee.Salary</td>
            <td>@employee.DepartmentName</td>
            <td>@employee.Skills</td>
        </tr>
    }
</table>

@* add a div containing the page-model attribute and so the tag helper will convert this div to pagination links 
be binded to the respective property defined on the tag helper class
page-model ---- PageModel
page-name ----  PageName
page-classes-enabled --- PageClassesEnabled
page-class --- PageClass
page-class-selected --- PageClassSelected *@
<div class="pagingDiv" page-model="Model.employeeList.PagingInfo" page-name="Read" page-classes-enabled="true"
    page-class="paging" page-class-selected="active"></div>


@functions {
    public class ReadModel : PageModel
    {
        private readonly IRepository<MySqlEmployee> _employeeRepository;
        private readonly IRepository<Department> _departmentRepository;
        public ReadModel(IRepository<MySqlEmployee> employeeRepository, IRepository<Department> departmentRepository)
        {
            _employeeRepository = employeeRepository;
            _departmentRepository = departmentRepository;
        }

        public EmployeeList? employeeList { get; set; }

        public async Task OnGet(int id)
        {
            PagingInfo pagingInfo = new PagingInfo();
            employeeList = new EmployeeList()
            {
                Employees = [],
                PagingInfo = pagingInfo
            };

            // set the page size as 10 which you can change according to your wish
            int pageSize = 10;
            pagingInfo.CurrentPage = id == 0 ? 1 : id;
            pagingInfo.ItemsPerPage = pageSize;

            // the value of the starting record for the page is calculated and added to the skip variable
            var skip = pageSize * (Convert.ToInt32(id) - 1);
            var resultTuple = await _employeeRepository.ReadAllFilterAsync(skip, pageSize);

            // method returns Tuple whose value is extracted and provided to the TotalItems of pagingInfo and employee of employeeList
            pagingInfo.TotalItems = resultTuple.Item2;
            List<MySqlEmployee> employees = resultTuple.Item1;
            employeeList.Employees = employees;
            employeeList.PagingInfo = pagingInfo;
        }

        public async Task<IActionResult> OnPostDeleteAsync(int id)
        {
            await _employeeRepository.DeleteAsync(id);
            return RedirectToPage("Read", new { id = 1 });
        }
    }
}