@page
@model CreateModel
@using Microsoft.AspNetCore.Mvc.RazorPages;
@using DotNetRazorPages.Entity;
@using Models;
@using System.Text.RegularExpressions

@{
    ViewData["Title"] = "Create a Movie";
}

<h1 class="bg-info text-white">Create a Movie</h1>

<div asp-validation-summary="All" class="text-danger"></div>
<form method="post">
    <div class="form-group">
        <label asp-for="@Model.Movie!.Name"></label>
        <input type="text" asp-for="@Model.Movie!.Name" class="form-control" />
        <span asp-validation-for="@Model.Movie!.Name" class="text-danger"></span>
    </div>
    <button id="addRow" type="button" class="btn btn-info">Add</button>
    <div id="newRow">
        <input type="hidden" id="total" value="0" />
    </div>
    <button type="submit" class="btn btn-primary">Create</button>
</form>

@section Scripts
{
    <script>
        $("#addRow").click(function () {
            addRow("");
        });
        $(document).on('click', '#removeRow', function () {
            var rowCount = parseInt($("#total").val());
            rowCount--;
            $("#total").val(rowCount);
            $(this).closest('#inputRow').remove();
        });

        $(document).ready(function () {
            let actors = '@TempData["actors"]';
            actors = actors.split(",");

            for (const actor of actors) {
                addRow(actor);
            }
        }); 
    </script>
}

@functions {
    public class CreateModel : PageModel
    {
        private readonly IRepository<Movie> _repository;
        [BindProperty]
        public Movie? Movie { get; set; }
        public CreateModel(IRepository<Movie> repository)
        {
            _repository = repository;
        }


        public IActionResult OnGet()
        {
            return Page();
        }

        public async Task<IActionResult> OnPostAsync()
        {
            if (ModelState.IsValid)
            {
                var values = Request.Form.Where(f =>
                {
                    // Instantiate the regular expression object.
                    Regex r = new Regex(@"\[\d+\].Name", RegexOptions.IgnoreCase);
                    string actorName = f.Value.ToString().Trim();
                    if (string.IsNullOrEmpty(actorName))
                    {
                        // for empty actor name
                        return false;
                    }
                    return r.Match(f.Key).Success;
                }).ToDictionary().Values;

                Movie!.Actors = string.Join(";", values);
                await _repository.CreateAsync(Movie ?? new Movie()
                {
                    Name = "Test"
                });
                return RedirectToPage("Read", new { id = 1 });
            }
            else
            {
                var values = Request.Form.Where(f =>
                {
                    // Instantiate the regular expression object.
                    Regex r = new Regex(@"\[\d+\].Name", RegexOptions.IgnoreCase);
                    string actorName = f.Value.ToString().Trim();
                    if (string.IsNullOrEmpty(actorName))
                    {
                        // for empty actor name
                        return false;
                    }
                    return r.Match(f.Key).Success;
                }).ToDictionary().Values;

                TempData["actors"] = string.Join(",", values);
                return Page();
            }
        }
    }
}