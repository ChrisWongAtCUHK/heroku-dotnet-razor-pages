@page
@model CreateModel
@using Microsoft.AspNetCore.Mvc.RazorPages;
@using DotNetRazorPages.Entity;
@using Models;

@{
    ViewData["Title"] = "Create a Movie";
}

<h1 class="bg-info text-white">Create a Movie</h1>

<div asp-validation-summary="All" class="text-danger"></div>
<form method="post">
    <div class="form-group">
        <label asp-for="@Model.movie!.Name"></label>
        <input type="text" asp-for="@Model.movie!.Name" class="form-control" />
        <span asp-validation-for="@Model.movie!.Name" class="text-danger"></span>
    </div>
    <button id="addRow" type="button" class="btn btn-info">Add</button>
    <div id="newRow">
        <input type="hidden" id="total" value="0" />
    </div>
    <button type="submit" class="btn btn-primary">Create</button>
</form>

@section Scripts
{
    <script>
        $("#addRow").click(function () {
            var rowCount = parseInt($("#total").val());
            rowCount++;
            $("#total").val(rowCount);
            var html = '';
            html += '<div id="inputRow">';
            html += '<input type="text" name="[' + (rowCount - 1) + '].Name"  />';
            //add more inputs here...  
            html += '<button id="removeRow" type="button" class="btn btn-danger">Remove</button>';
            html += '</div>';

            $('#newRow').append(html);
        });
        $(document).on('click', '#removeRow', function () {
            var rowCount = parseInt($("#total").val());
            rowCount--;
            $("#total").val(rowCount);
            $(this).closest('#inputRow').remove();
        });  
    </script>
}

@functions {
    public class CreateModel : PageModel
    {
        private readonly IRepository<Movie> _repository;
        [BindProperty]
        public Movie? movie { get; set; }
        public CreateModel(IRepository<Movie> repository)
        {
            _repository = repository;
        }


        public IActionResult OnGet()
        {
            return Page();
        }

        public async Task<IActionResult> OnPostAsync()
        {
            if (ModelState.IsValid)
            {
                await _repository.CreateAsync(movie ?? new Movie()
                {
                    Name = "Test"
                });
                return RedirectToPage("Read", new { id = 1 });
            }
            else
                return Page();
        }
    }
}