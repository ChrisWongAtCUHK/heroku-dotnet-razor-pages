@page "{id:int?}"
@model ReadModel
@using Microsoft.AspNetCore.Mvc.RazorPages;
@using DotNetRazorPages.Entity;
@using Models;
@using Taghelpers.Paging;

@{
    ViewData["Title"] = "Movies";
}

@section Style{
    <link rel="stylesheet" href="~/css/pagingDiv.css" asp-append-version="true" />
}

<h1 class="bg-info text-white">Movies</h1>
<a asp-page="Create" class="btn btn-secondary">Create a Movie</a>
<span>
    &nbsp;
</span>
<a asp-page="Search" class="btn btn-secondary">Search a Movie</a>
<div>
    &nbsp;
</div>
<table class="table table-sm table-bordered">
    <tr>
        <th>Id</th>
        <th>Name</th>
        <th>Actors</th>
        <th></th>
        <th></th>
    </tr>
    @foreach (Movie m in Model.movieList!.Movies)
    {
        <tr>
            <td>@m.Id</td>
            <td>@m.Name</td>
            <td>@m.Actors</td>
            <td>
                <a class="btn btn-sm btn-primary" asp-page="Update" asp-route-id="@m.Id">
                    Update
                </a>
            </td>
            <td>
                @* asp-page-handler – specifies "delete" hander method to be called when the form is submitted. 
                   asp-route-id – specifies the value of id to be passes on the route. This will contain the id of the record *@
                <form asp-page-handler="Delete" asp-route-id="@m.Id" method="post">
                    <button type="submit" class="btn btn-sm btn-danger">
                        Delete
                    </button>
                </form>
            </td>
        </tr>
    }
</table>

@* add a div containing the page-model attribute and so the tag helper will convert this div to pagination links 
be binded to the respective property defined on the tag helper class
page-model ---- PageModel
page-name ----  PageName
page-classes-enabled --- PageClassesEnabled
page-class --- PageClass
page-class-selected --- PageClassSelected *@
<div class="pagingDiv" page-model="Model.movieList.PagingInfo" page-name="Read" page-classes-enabled="true"
    page-class="paging" page-class-selected="active"></div>


@functions {
    public class ReadModel : PageModel
    {
        private readonly IRepository<Movie> _repository;
        public ReadModel(IRepository<Movie> repository)
        {
            _repository = repository;
        }

        public MovieList? movieList { get; set; }

        public async Task OnGet(int id)
        {
            PagingInfo pagingInfo = new PagingInfo();
            movieList = new MovieList()
            {
                Movies = new List<Movie>(),
                PagingInfo = pagingInfo
            };

            // set the page size as 10 which you can change according to your wish
            int pageSize = 10;
            pagingInfo.CurrentPage = id == 0 ? 1 : id;
            pagingInfo.ItemsPerPage = pageSize;

            // the value of the starting record for the page is calculated and added to the skip variable
            var skip = pageSize * (Convert.ToInt32(id) - 1);
            var resultTuple = await _repository.ReadAllFilterAsync(skip, pageSize);

            // method returns Tuple whose value is extracted and provided to the TotalItems of pagingInfo and movie of movieList
            pagingInfo.TotalItems = resultTuple.Item2;
            movieList.Movies = resultTuple.Item1;

            movieList.PagingInfo = pagingInfo;
        }

        public async Task<IActionResult> OnPostDeleteAsync(int id)
        {
            await _repository.DeleteAsync(id);
            return RedirectToPage("Read", new { id = 1 });
        }
    }
}