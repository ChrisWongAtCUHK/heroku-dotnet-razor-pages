@page "{id:int?}"
@model SearchModel
@using DotNetRazorPages.Taghelpers.Paging
@using Microsoft.AspNetCore.Mvc.RazorPages;
@using DotNetRazorPages.Entity;
@using System.Linq.Expressions;
@using Microsoft.EntityFrameworkCore
@using Models;
@using System.Text.RegularExpressions

@{
    ViewData["Title"] = "Search Movies";
}

@section Style{
    <link rel="stylesheet" href="~/css/pagingDiv.css" asp-append-version="true" />
}

<h1 class="bg-info text-white">Movies</h1>
<a asp-page="Read" asp-route-id="1" class="btn btn-secondary">View all Movies</a>

<form method="post">
    <div class="form-group">
        <label asp-for="@Model.movie!.Name"></label>
        <input type="text" asp-for="@Model.movie!.Name" class="form-control" />
    </div>
    <div>
        &nbsp;
    </div>
    <button type="submit" class="btn btn-primary">Search</button>
</form>


@if (Model.movieList != null)
{
    <h2 class="bg-danger text-white m-2">Result</h2>
    <table class="table table-sm table-bordered">
        <tr>
            <th>Id</th>
            <th>Name</th>
            <th>Actors</th>
        </tr>
        @foreach (Movie m in Model.movieList.Movies)
        {
            <tr>
                <td>@m.Id</td>
                <td>@m.Name</td>
            </tr>
        }
    </table>
    @* add a div containing the page-model attribute and so the tag helper will convert this div to pagination links 
    be binded to the respective property defined on the tag helper class
    page-model ---- PageModel
    page-name ----  PageName
    page-classes-enabled --- PageClassesEnabled
    page-class --- PageClass
    page-class-selected --- PageClassSelected *@
    <div class="pagingDiv" page-model="Model.movieList.PagingInfo" page-name="Search" page-classes-enabled="true"
        page-class="paging" page-class-selected="active"></div>
}

@functions {
    public class SearchModel : PageModel
    {
        private readonly IRepository<Movie> _repository;
        public SearchModel(IRepository<Movie> repository)
        {
            _repository = repository;
        }

        [BindProperty]
        public Movie? movie { get; set; }

        public MovieList? movieList { get; set; }

        public async Task<IActionResult> OnGetAsync(int id)
        {
            if(id != 0)
            {
                var movieName = Request.Cookies["movieName"];
                if(movieName != null && !string.IsNullOrEmpty(movieName))
                {
                    await SetPaging(movieName, id);
                }                
            }
            
            return Page();
        }

        public async Task<IActionResult> OnPostAsync()
        {
            const int id = 1;
            await SetPaging(movie!.Name, id);
            Response.Cookies.Append("movieName", movie!.Name);
            return Page();
        }

        private async Task SetPaging(string movieName, int id)
        {
            PagingInfo pagingInfo = new PagingInfo();
            movieList = new MovieList()
            {
                Movies = new List<Movie>(),
                PagingInfo = pagingInfo
            };

            // set the page size as 10 which you can change according to your wish
            int pageSize = 10;
            pagingInfo.CurrentPage = id == 0 ? 1 : id;
            pagingInfo.ItemsPerPage = pageSize;

            // the value of the starting record for the page is calculated and added to the skip variable
            var skip = pageSize * (Convert.ToInt32(id) - 1);
            var resultTuple = await _repository.ReadAllAsync(movieName, skip, pageSize);

            // method returns Tuple whose value is extracted and provided to the TotalItems of pagingInfo and movie of movieList
            pagingInfo.TotalItems = resultTuple.Item2;
            movieList.Movies = resultTuple.Item1;

            movieList.PagingInfo = pagingInfo;
        }
    }
}